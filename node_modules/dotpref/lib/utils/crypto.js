"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultCrypto = exports.getKey = exports.SSH_KEY_PATH = exports.OUTPUT_ENCODING = exports.INPUT_ENCODING = void 0;
const crypto_1 = require("crypto");
const fs_1 = require("fs");
const os_1 = require("os");
const path_1 = require("path");
exports.INPUT_ENCODING = 'utf8';
exports.OUTPUT_ENCODING = 'hex';
exports.SSH_KEY_PATH = path_1.join(os_1.homedir(), '.ssh', 'id_rsa');
const readKey = (keyPath) => fs_1.existsSync(keyPath) && fs_1.readFileSync(keyPath).toString(exports.INPUT_ENCODING);
exports.getKey = ({ keyPath, defaultKey = 'PREF' } = {}) => readKey(keyPath) || readKey(exports.SSH_KEY_PATH) || defaultKey;
exports.getDefaultCrypto = (config = {}) => {
    const key = exports.getKey(config);
    const encryptedKey = crypto_1.createHash('sha256').update(key).digest();
    const encoder = (text) => {
        const iv = crypto_1.randomBytes(8).toString(exports.OUTPUT_ENCODING);
        const cipher = crypto_1.createCipheriv('aes256', encryptedKey, iv);
        const encrypted = cipher.update(text, exports.INPUT_ENCODING, exports.OUTPUT_ENCODING) +
            cipher.final(exports.OUTPUT_ENCODING);
        return `${iv.toString()}:${encrypted.toString()}`;
    };
    const decoder = (text) => {
        const [ivString, encrypted] = text.split(':');
        const decipher = crypto_1.createDecipheriv('aes256', encryptedKey, ivString);
        return (decipher.update(encrypted, exports.OUTPUT_ENCODING, exports.INPUT_ENCODING) +
            decipher.final(exports.INPUT_ENCODING));
    };
    return {
        encoder,
        decoder,
    };
};

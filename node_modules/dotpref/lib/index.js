"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPref = exports.Pref = exports.getDefaultCrypto = void 0;
const path_1 = require("path");
const io_1 = require("./utils/io");
const options_1 = require("./utils/options");
const utils_1 = require("./utils/utils");
__exportStar(require("./types"), exports);
var crypto_1 = require("./utils/crypto");
Object.defineProperty(exports, "getDefaultCrypto", { enumerable: true, get: function () { return crypto_1.getDefaultCrypto; } });
const getModuleParentDir = () => {
    const warn = console.warn;
    console.warn = () => { };
    delete require.cache[__filename];
    console.warn = warn;
    return path_1.dirname((module.parent && module.parent.filename) || '.');
};
let instance;
const getInstance = () => {
    if (!instance) {
        instance = createPref({
            defaults: {},
        });
    }
    return instance;
};
exports.Pref = {
    get: key => getInstance().get(key),
    set: (key, value) => getInstance().set(key, value),
    reset: key => getInstance().reset(key),
    read: () => getInstance().read(),
    write: () => getInstance().write(),
    filePath: '',
};
Object.defineProperty(exports.Pref, 'filePath', {
    enumerable: true,
    get: () => getInstance().filePath,
});
function createPref(_a) {
    var { name } = _a, options = __rest(_a, ["name"]);
    const parentPackageData = utils_1.getPackageData(getModuleParentDir());
    const defaultName = parentPackageData.name;
    const { defaults, filename, dirPath, serializer, deserializer, encoder, decoder, setter, getter, equality, } = options_1.getOptions(Object.assign(Object.assign({}, options), { name: utils_1.normalizeId(name || defaultName) }));
    let state;
    const get = (key) => getter(state, key);
    const set = (key, value) => {
        const oldState = state;
        state = setter(state, key, value);
        if (utils_1.shouldWrite(equality, oldState, state)) {
            write();
        }
    };
    const reset = (key) => {
        set(key, defaults[key]);
    };
    const read = () => {
        try {
            const encryptedData = io_1.readFromDisk(dirPath, filename);
            const serializedData = decoder(encryptedData);
            state = Object.assign(Object.assign({}, defaults), deserializer(serializedData));
        }
        catch (e) {
            state = Object.assign({}, defaults);
        }
    };
    const write = () => {
        const serializedData = serializer(state);
        const encryptedData = encoder(serializedData);
        io_1.writeToDisk(dirPath, filename, encryptedData);
    };
    const api = {
        get,
        set,
        reset,
        write,
        read,
        filePath: path_1.join(dirPath, filename),
    };
    Object.defineProperty(api, 'filePath', {
        writable: false,
        enumerable: true,
        value: path_1.join(dirPath, filename),
    });
    read();
    return api;
}
exports.createPref = createPref;

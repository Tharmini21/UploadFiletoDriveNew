"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.httpTransport = void 0;
const BadRequestError_1 = require("../errors/BadRequestError");
const InternalError_1 = require("../errors/InternalError");
const normalizeError_1 = require("../utils/normalizeError");
/**
 * This enhancer will return a function that takes a `Request` and a `Response`
 * and passes the `body` parameter from the request through to the handler (or
 * next enhancer). Any response from the handler is converted to json and returned
 * on the response with a `200` status.
 *
 * **Note**: Should always be the first enhancer given and shouldn't be used with any other transport enhancers.
 */
exports.httpTransport = create => () => {
    const handler = create();
    return (request, response) => {
        const throwAndRespond = (e) => {
            const error = normalizeError_1.normalizeError(e);
            // Disabling eslint warning here because the expected behavior is to print the error.
            // eslint-disable-next-line no-console
            console.error(error);
            if (response) {
                response.status(200).json(error.toJSON());
            }
        };
        try {
            if (request === undefined) {
                throw new InternalError_1.InternalError('HTTP Request can not be undefined.');
            }
            if (response === undefined) {
                throw new InternalError_1.InternalError('HTTP Response can not be undefined.');
            }
            const { body } = request;
            if (body === undefined) {
                throw new BadRequestError_1.BadRequestError('HTTP Request must contain `body` property.');
            }
            handler(body, (err, result) => {
                if (err) {
                    throwAndRespond(err);
                }
                else {
                    response.status(200).json(result);
                }
            });
        }
        catch (err) {
            throwAndRespond(err);
            if (!process.env.SILENCE) {
                throw err;
            }
        }
    };
};
//# sourceMappingURL=httpTransport.js.map
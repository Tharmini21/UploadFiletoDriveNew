export declare type ExtensionHandlerCallback = (err?: Error, result?: unknown) => void;
export declare type ExtensionHandler = (...args: any[]) => void;
export declare type DefaultExtensionHandler = (payload: any, callback: ExtensionHandlerCallback) => void;
export interface RequestPayload<Event extends string> {
    event: Event;
}
export declare type ExtensionHandlerEnhancer<ReturnHandler extends ExtensionHandler = DefaultExtensionHandler, NextHandler extends ExtensionHandler = DefaultExtensionHandler> = (extensibleHandler: ExtensionHandlerEnhancerCreate<NextHandler>) => ExtensionHandlerEnhancerCreate<ReturnHandler>;
export declare type ExtensionHandlerEnhancerCreate<Handler extends ExtensionHandler = ExtensionHandler> = () => Handler;
declare type InferEnhancerReturn<T> = T extends ExtensionHandlerEnhancer<infer U> ? U : T;
export declare function createExtensionHandler(): ExtensionHandler;
export declare function createExtensionHandler<Enhancer extends ExtensionHandlerEnhancer<ExtensionHandler, ExtensionHandler>, Handler = InferEnhancerReturn<Enhancer>>(enhancer: Enhancer): Handler;
export {};
//# sourceMappingURL=handler.d.ts.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xorHandler = void 0;
const InternalError_1 = require("../errors/InternalError");
const DEFAULT_CONFIG = {
    getFunctionKey: (payload) => payload && payload.event,
};
function mapValues(obj, fn) {
    return Object.keys(obj).reduce((result, key) => (Object.assign(Object.assign({}, result), { [key]: obj[key](fn)() })), {});
}
/**
 * This handler will call one and only one enhancer based on the payload key.
 * It acts as an exclusive OR, or switch statment.
 * @param enhancers a key value map where the key is a string and the value is an enhancer.
 * @param options
 */
exports.xorHandler = (enhancers, options = DEFAULT_CONFIG) => create => () => {
    const fns = mapValues(enhancers, create);
    return (payload, callback) => {
        const enhancerKey = options.getFunctionKey(payload);
        if (typeof enhancerKey !== 'string') {
            throw new InternalError_1.InternalError('`enhancerKey` incorrectly defined in `xorHandler`.');
        }
        const handler = fns[enhancerKey];
        if (typeof handler === 'function') {
            handler(payload, callback);
        }
    };
};
//# sourceMappingURL=xorHandler.js.map
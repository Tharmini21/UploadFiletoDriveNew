import { BridgeHTTPQuery } from './createQuery';
import { BridgeHTTPInstance, BridgeHTTPRequestConfig } from './types';
export declare enum WorkflowRunState {
    'IN_PROGRESS' = 0,
    'AWAITING_USER_INPUT' = 1,
    'AWAITING_ADMIN_INPUT' = 2,
    'ON_HOLD' = 3,
    'STOPPED' = 4,
    'DONE' = 5
}
export interface WorkflowRun {
    objectUUID: string;
    createTime: number;
    createTimeString: string;
    lastUpdateTime: number;
    lastUpdateTimeString: string;
    serviceOwner: string;
    keys: any;
    orderBy: any;
    delete: any;
    intent: any;
    startState: any;
    domain: any;
    isSystem: any;
    transits: any;
    answer: any;
    workspace: string;
    transient: any;
    requestUUID: string;
    state: WorkflowRunState;
    handlerUUID: string;
    currentTransit: any;
    expiryTime: number;
    failedParse: any;
    activeTime: number;
    extra: any;
    useruuid: string;
    ParentConversation: any;
    parentData: any;
}
export declare const query: {
    (instance: BridgeHTTPInstance): (options: BridgeHTTPQuery, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<import("./createQuery").BridgeHTTPQueryResponse<WorkflowRun>>>;
    (options: BridgeHTTPQuery, config: BridgeHTTPRequestConfig): Promise<import("./types").BridgeHTTPResponse<import("./createQuery").BridgeHTTPQueryResponse<WorkflowRun>>>;
};
export declare const fetch: {
    (instance: BridgeHTTPInstance): (options: {
        requestUUID: string;
        objectUUID: string;
    }, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<WorkflowRun>>;
    (options: {
        requestUUID: string;
        objectUUID: string;
    }, config: BridgeHTTPRequestConfig): Promise<import("./types").BridgeHTTPResponse<WorkflowRun>>;
};
declare const _default: (instance: BridgeHTTPInstance) => {
    query: (options: BridgeHTTPQuery, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<import("./createQuery").BridgeHTTPQueryResponse<WorkflowRun>>>;
    fetch: (options: {
        requestUUID: string;
        objectUUID: string;
    }, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<WorkflowRun>>;
};
export default _default;
//# sourceMappingURL=workflowRun.d.ts.map
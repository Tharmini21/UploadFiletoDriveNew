import { BridgeHTTPInstance, BridgeHTTPRequestConfig } from './types';
export interface Caller {
    revision: string;
    pluginUUID: string;
    installUUID: string;
}
export interface ExtensionUUIDOptions {
    extensionUUID: string;
}
export declare type CallerOptions = ExtensionUUIDOptions;
export declare const caller: {
    (instance: BridgeHTTPInstance): (options: ExtensionUUIDOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<{
        caller?: Caller;
    }>>;
    (options: ExtensionUUIDOptions, config: BridgeHTTPRequestConfig): Promise<import("./types").BridgeHTTPResponse<{
        caller?: Caller;
    }>>;
};
export interface RevokeOptions extends ExtensionUUIDOptions {
    force?: boolean;
}
export declare const revoke: {
    (instance: BridgeHTTPInstance): (options: RevokeOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<any>>;
    (options: RevokeOptions, config: BridgeHTTPRequestConfig): Promise<import("./types").BridgeHTTPResponse<any>>;
};
export interface UploadSpecOptions {
    data: any;
}
export declare const uploadSpec: {
    (instance: BridgeHTTPInstance): (options: UploadSpecOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<{
        uploadRef?: Caller;
    }>>;
    (options: UploadSpecOptions, config: BridgeHTTPRequestConfig): Promise<import("./types").BridgeHTTPResponse<{
        uploadRef?: Caller;
    }>>;
};
export interface ActivateRevisionOptions extends ExtensionUUIDOptions {
    revision: string;
}
export declare const activateRevision: {
    (instance: BridgeHTTPInstance): (options: ActivateRevisionOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<{
        uploadRef?: Caller;
    }>>;
    (options: ActivateRevisionOptions, config: BridgeHTTPRequestConfig): Promise<import("./types").BridgeHTTPResponse<{
        uploadRef?: Caller;
    }>>;
};
declare const _default: (instance: BridgeHTTPInstance) => {
    caller: (options: ExtensionUUIDOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<{
        caller?: Caller;
    }>>;
    revoke: (options: RevokeOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<any>>;
    uploadSpec: (options: UploadSpecOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<{
        uploadRef?: Caller;
    }>>;
    activateRevision: (options: ActivateRevisionOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<{
        uploadRef?: Caller;
    }>>;
};
export default _default;
//# sourceMappingURL=extension.d.ts.map
import { BridgeHTTPInstance, BridgeHTTPRequestConfig } from './types';
export { Caller } from './extension';
export * from './types';
export { WorkflowRun, WorkflowRunState } from './workflowRun';
export declare type BridgeHTTPClient = ReturnType<typeof buildHTTPClient>;
declare const buildHTTPClient: (instance: BridgeHTTPInstance) => {
    instance: BridgeHTTPInstance;
    extension: {
        caller: (options: import("./extension").ExtensionUUIDOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<{
            caller?: import("./extension").Caller;
        }>>;
        revoke: (options: import("./extension").RevokeOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<any>>;
        uploadSpec: (options: import("./extension").UploadSpecOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<{
            uploadRef?: import("./extension").Caller;
        }>>;
        activateRevision: (options: import("./extension").ActivateRevisionOptions, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<{
            uploadRef?: import("./extension").Caller;
        }>>;
    };
    platform: {
        get: (config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<any>>;
    };
    workflowRun: {
        query: (options: import("./createQuery").BridgeHTTPQuery, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<import("./createQuery").BridgeHTTPQueryResponse<import("./workflowRun").WorkflowRun>>>;
        fetch: (options: {
            requestUUID: string;
            objectUUID: string;
        }, config?: BridgeHTTPRequestConfig) => Promise<import("./types").BridgeHTTPResponse<import("./workflowRun").WorkflowRun>>;
    };
};
export declare function createHTTPClient(configOrInstance: BridgeHTTPRequestConfig | BridgeHTTPInstance): BridgeHTTPClient;
//# sourceMappingURL=index.d.ts.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleOAuth2Start = exports.OAUTH2_START = void 0;
const handler_1 = require("@smartsheet-extensions/handler");
const BadStartOAuth2ResponseError_1 = require("../errors/BadStartOAuth2ResponseError");
const OAuth2SetupData_1 = require("../models/OAuth2SetupData");
const StartOAuth2Response_1 = require("../responses/StartOAuth2Response");
exports.OAUTH2_START = 'OAUTH2_START';
const isStartOAuth2Payload = (payload) => payload.event === exports.OAUTH2_START;
const isOAuth2SetupData = (o) => {
    return (handler_1.isSerializableObject(o) &&
        o.oauth2URI !== undefined &&
        o.clientId !== undefined);
};
exports.handleOAuth2Start = (config) => create => () => {
    const next = create();
    return (body, callback) => {
        if (typeof config.onOAuthStart !== 'function') {
            throw new handler_1.BadRequestError('onOAuthStart function has not been defined');
        }
        if (!isStartOAuth2Payload(body)) {
            throw new handler_1.BadRequestError('Payload must contain `event` property and `payload` property.');
        }
        const settings = (body.payload && body.payload.registrationData) || {};
        const { caller } = body;
        const { providerOAuth } = body.payload;
        next(config.onOAuthStart({
            oauthType: body.payload.oauthType,
        }, {
            caller,
            settings,
            redirectURI: body.payload.redirectURI,
            oAuthData: providerOAuth,
        }), (err, result) => {
            if (err) {
                callback(err);
            }
            else if (result instanceof StartOAuth2Response_1.StartOAuth2Response) {
                callback(err, result);
            }
            else if (result instanceof OAuth2SetupData_1.OAuth2SetupData) {
                callback(err, StartOAuth2Response_1.StartOAuth2Response.create(result));
            }
            else if (isOAuth2SetupData(result)) {
                callback(err, StartOAuth2Response_1.StartOAuth2Response.create(OAuth2SetupData_1.OAuth2SetupData.create(result)));
            }
            else if (result === null) {
                throw new BadStartOAuth2ResponseError_1.BadStartOAuth2ResponseError('null');
            }
            else {
                throw new BadStartOAuth2ResponseError_1.BadStartOAuth2ResponseError(typeof result);
            }
        });
    };
};
//# sourceMappingURL=handleOAuthStart.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleModules = exports.MODULE_EXEC = void 0;
const handler_1 = require("@smartsheet-extensions/handler");
const BadModuleResponseError_1 = require("../errors/BadModuleResponseError");
const ExternalChannelSettings_1 = require("../models/ExternalChannelSettings");
const WorkflowRun_1 = require("../models/WorkflowRun");
const ModuleResponse_1 = require("../responses/ModuleResponse");
exports.MODULE_EXEC = 'MODULE_EXEC';
const isModulePayload = (payload) => payload.event === exports.MODULE_EXEC;
exports.handleModules = (config) => create => () => {
    const next = create();
    return (body, callback) => {
        if (!isModulePayload(body)) {
            throw new handler_1.BadRequestError('Payload must contain `event` property and `payload` property.');
        }
        const { moduleId, moduleParam, registrationData: settings = {}, retryCount, channelSetting, conversation, providerOAuth, invokerOAuth, } = body.payload;
        const { caller } = body;
        if (moduleId === undefined) {
            throw new handler_1.BadRequestError('Payload must contain property `moduleId` to execute a module.');
        }
        if (config === undefined ||
            config.modules === undefined ||
            config.modules[moduleId] === undefined) {
            throw new handler_1.NotFoundError(`Module \`${moduleId}\` does not exist.`);
        }
        const channelSettings = ExternalChannelSettings_1.parseExternalChannelSettingsPayload(channelSetting, invokerOAuth);
        const workflowRun = WorkflowRun_1.getWorkflowRunFromPayloadObject(conversation);
        next(config.modules[moduleId](moduleParam, {
            caller,
            settings,
            retryCount: retryCount || 0,
            workflowRun,
            channelSettings,
            oAuthData: providerOAuth,
        }), (err, result) => {
            if (err) {
                callback(err);
            }
            else if (result instanceof ModuleResponse_1.ModuleResponse) {
                callback(err, result);
            }
            else if (handler_1.isSerializableObject(result) ||
                handler_1.isSerializableEmpty(result)) {
                callback(err, ModuleResponse_1.ModuleResponse.create({ value: result }));
            }
            else {
                throw new BadModuleResponseError_1.BadModuleResponseError(moduleId, typeof result);
            }
        });
    };
};
//# sourceMappingURL=handleModules.js.map
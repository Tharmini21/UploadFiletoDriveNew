"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleExternals = exports.EXTERNAL_CALL = void 0;
const handler_1 = require("@smartsheet-extensions/handler");
const BadExternalResponseError_1 = require("../errors/BadExternalResponseError");
const ChannelOutput_1 = require("../models/ChannelOutput");
const HttpResponse_1 = require("../models/HttpResponse");
const ExternalResponse_1 = require("../responses/ExternalResponse");
exports.EXTERNAL_CALL = 'EXTERNAL_CALL';
const isExternalPayload = (payload) => payload.event === exports.EXTERNAL_CALL;
function isHTTPResponse(value) {
    return (value instanceof HttpResponse_1.HttpResponse ||
        (handler_1.isSerializableObject(value) && value.httpStatus !== undefined));
}
function isChannelOutput(value) {
    return (value instanceof ChannelOutput_1.ChannelOutput ||
        (handler_1.isSerializableObject(value) &&
            value.channelMessage !== undefined &&
            value.channelSetting !== undefined));
}
function isArrayOfChannelOutput(value) {
    return Array.isArray(value) && value.every(item => isChannelOutput(item));
}
exports.handleExternals = (config) => create => () => {
    const next = create();
    return (body, callback) => {
        if (!isExternalPayload(body)) {
            throw new handler_1.BadRequestError('Payload must contain `event` property and `payload` property.');
        }
        const { call: externalId, bodyData, registrationData: settings = {}, inboundHeaders, method, formData, queryParam, providerOAuth, } = body.payload;
        const { caller } = body;
        if (externalId === undefined) {
            throw new handler_1.BadRequestError('Payload must contain property `call` to execute an external function.');
        }
        if (config === undefined ||
            config.externals === undefined ||
            config.externals[externalId] === undefined) {
            throw new handler_1.NotFoundError(`External function \`${externalId}\` does not exist.`);
        }
        next(config.externals[externalId]({
            bodyData,
            inboundHeaders,
            method,
            formData,
            queryParam,
        }, { caller, settings, oAuthData: providerOAuth }), (err, result) => {
            if (err) {
                callback(err);
            }
            else if (result instanceof ExternalResponse_1.ExternalResponse) {
                callback(err, result);
            }
            else if (isHTTPResponse(result)) {
                callback(err, ExternalResponse_1.ExternalResponse.create({
                    httpResponse: HttpResponse_1.HttpResponse.create(result),
                }));
            }
            else if (isChannelOutput(result)) {
                callback(err, ExternalResponse_1.ExternalResponse.create({
                    channelOutput: [ChannelOutput_1.ChannelOutput.create(result)],
                }));
            }
            else if (isArrayOfChannelOutput(result)) {
                callback(err, ExternalResponse_1.ExternalResponse.create({
                    channelOutput: result,
                }));
            }
            else if (result === null) {
                throw new BadExternalResponseError_1.BadExternalResponseError(externalId, 'null');
            }
            else {
                throw new BadExternalResponseError_1.BadExternalResponseError(externalId, typeof result);
            }
        });
    };
};
//# sourceMappingURL=handleExternals.js.map
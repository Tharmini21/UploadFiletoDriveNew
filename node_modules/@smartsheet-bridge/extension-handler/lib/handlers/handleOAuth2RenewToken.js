"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleOAuth2RenewToken = exports.OAUTH2_RENEW_TOKEN = void 0;
const handler_1 = require("@smartsheet-extensions/handler");
const BadRenewOAuth2TokenResponseError_1 = require("../errors/BadRenewOAuth2TokenResponseError");
const OAuth2Data_1 = require("../models/OAuth2Data");
const HandleOAuth2CodeResponse_1 = require("../responses/HandleOAuth2CodeResponse");
const RenewOAuth2TokenResponse_1 = require("../responses/RenewOAuth2TokenResponse");
exports.OAUTH2_RENEW_TOKEN = 'OAUTH2_RENEW_TOKEN';
const isRenewOAuth2TokenPayload = (payload) => payload.event === exports.OAUTH2_RENEW_TOKEN;
const isOAuth2Data = (o) => {
    return handler_1.isSerializableObject(o) && o.access_token !== undefined;
};
exports.handleOAuth2RenewToken = (config) => create => () => {
    const next = create();
    return (body, callback) => {
        if (typeof config.onOAuthRenewToken !== 'function') {
            throw new handler_1.BadRequestError('onOAuthRenewToken function has not been defined');
        }
        if (!isRenewOAuth2TokenPayload(body)) {
            throw new handler_1.BadRequestError('Payload must contain `event` property and `payload` property.');
        }
        const settings = (body.payload && body.payload.registrationData) || {};
        const { caller } = body;
        next(config.onOAuthRenewToken({
            renewToken: body.payload.renewToken,
            oauthType: body.payload.oauthType,
        }, {
            settings,
            caller,
            redirectURI: body.payload.redirectURI,
        }), (err, result) => {
            if (err) {
                callback(err);
            }
            else if (result instanceof RenewOAuth2TokenResponse_1.RenewOAuth2TokenResponse) {
                callback(err, result);
            }
            else if (result instanceof OAuth2Data_1.OAuth2Data) {
                callback(err, RenewOAuth2TokenResponse_1.RenewOAuth2TokenResponse.create(result));
            }
            else if (isOAuth2Data(result)) {
                callback(err, HandleOAuth2CodeResponse_1.HandleOAuth2CodeResponse.create(OAuth2Data_1.OAuth2Data.create(result)));
            }
            else if (result === null) {
                throw new BadRenewOAuth2TokenResponseError_1.BadRenewOAuth2TokenResponseError('null');
            }
            else {
                throw new BadRenewOAuth2TokenResponseError_1.BadRenewOAuth2TokenResponseError(typeof result);
            }
        });
    };
};
//# sourceMappingURL=handleOAuth2RenewToken.js.map
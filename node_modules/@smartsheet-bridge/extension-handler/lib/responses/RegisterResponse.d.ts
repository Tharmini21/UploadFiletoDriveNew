import { ExtensionResponse, SerializableClass, SerializableObject } from '@smartsheet-extensions/handler';
import { WorkflowTriggerSpec } from '../models/WorkflowTriggerSpec';
import { AbstractResponse } from './AbstractResponse';
export interface RegisterResponse<Settings extends SerializableObject> extends ExtensionResponse {
    settings?: Settings;
    workflowTriggers?: WorkflowTriggerSpec[];
}
export declare class RegisterResponse<Settings extends SerializableObject> extends AbstractResponse implements SerializableClass {
    /**
     * the updated extension settings.
     */
    settings?: Settings;
    /**
     * specifications of any workflow triggers that could be created from external events like webhook callbacks.
     */
    workflowTriggers?: WorkflowTriggerSpec[];
    static create<S extends SerializableObject>(props?: Partial<RegisterResponse<S>>): RegisterResponse<S>;
    constructor({ settings, status, workflowTriggers, }?: Partial<RegisterResponse<Settings>>);
    /**
     * Set updated extension settings on the response.
     * @param settings the updated extension settings.
     */
    setSettings(settings: Settings): void;
    /**
     * Adds workflow trigger specs to the response.
     * @param triggers one or more workflow trigger specs.
     */
    addWorkflowTriggers(...triggers: Partial<WorkflowTriggerSpec>[]): void;
    toSerializableObject(): {
        status: import("@smartsheet-extensions/handler").SerializableValue;
        registrationData: import("@smartsheet-extensions/handler").SerializableValue;
        workflowTriggers: import("@smartsheet-extensions/handler").SerializableValue;
    };
}
//# sourceMappingURL=RegisterResponse.d.ts.map
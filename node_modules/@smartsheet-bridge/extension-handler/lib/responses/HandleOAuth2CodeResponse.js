"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HandleOAuth2CodeResponse = void 0;
const AbstractResponse_1 = require("./AbstractResponse");
class HandleOAuth2CodeResponse extends AbstractResponse_1.AbstractResponse {
    constructor({ status, access_token, token_type, refresh_token, expires_in, grant_type, metadata, redirectMessage, redirectTo, settings, } = {}) {
        super(status);
        if (access_token)
            this.setAccessToken(access_token);
        if (token_type)
            this.setTokenType(token_type);
        if (refresh_token)
            this.setRefreshToken(refresh_token);
        if (expires_in)
            this.setExpiresIn(expires_in);
        if (grant_type)
            this.setGrantType(grant_type);
        if (metadata)
            this.setMetadata(metadata);
        if (redirectMessage)
            this.setRedirectMessage(redirectMessage);
        if (redirectTo)
            this.setRedirectTo(redirectTo);
        if (settings)
            this.setSettings(settings);
    }
    static create(props = {}) {
        return new HandleOAuth2CodeResponse(props);
    }
    toSerializableObject() {
        return {
            status: this.status,
            registrationData: this.settings,
            oauth2Token: {
                access_token: this.access_token,
                token_type: this.token_type,
                refresh_token: this.refresh_token,
                expires_in: this.expires_in,
                grant_type: this.grant_type,
                metadata: this.metadata,
            },
            redirect: this.redirectMessage || this.redirectTo
                ? {
                    redirectMessage: this.redirectMessage,
                    redirectTo: this.redirectTo,
                }
                : undefined,
        };
    }
    /**
     * Sets updated settings after the authentication flow is complete.
     *
     * If this is left undefined then the settings will not be updated.
     * @param settings the updated settings.
     */
    setSettings(settings) {
        this.settings = settings;
    }
    /**
     * Sets the oauth access token.
     * @param accessToken the oauth access token.
     */
    setAccessToken(accessToken) {
        this.access_token = accessToken;
    }
    /**
     * Sets the oauth token type.
     * @param tokenType the oauth token type.
     */
    setTokenType(tokenType) {
        this.token_type = tokenType;
    }
    /**
     * Sets the oauth refresh token.
     * @param refreshToken the oauth refresh token.
     */
    setRefreshToken(refreshToken) {
        this.refresh_token = refreshToken;
    }
    /**
     * Sets the number of seconds until that authentication is valid for.
     * @param expiresIn the number of seconds until that authentication is valid for.
     */
    setExpiresIn(expiresIn) {
        this.expires_in = expiresIn;
    }
    /**
     * Sets the auth grant type.
     * @param grantType the oauth grant type.
     */
    setGrantType(grantType) {
        this.grant_type = grantType;
    }
    /**
     * Sets additional metadata to be stored against the oauth token.
     * @param metadata additional metadata to be stored against the oauth token.
     */
    setMetadata(metadata) {
        this.metadata = metadata;
    }
    /**
     * Sets a URL that the user will be redirected to after they have completed the oauth flow.
     *
     * This will override ay value set for `redirectMessage`.
     * @param redirectTo a URL to redirect the user to.
     */
    setRedirectTo(redirectTo) {
        this.redirectTo = redirectTo;
    }
    /**
     * Sets a message to be displayed to the user after the have completed the oauth flow.
     *
     * If `redirectTo` is set, this will be ignored.
     * @param redirectMessage the redirect message.
     */
    setRedirectMessage(redirectMessage) {
        this.redirectMessage = redirectMessage;
    }
}
exports.HandleOAuth2CodeResponse = HandleOAuth2CodeResponse;
//# sourceMappingURL=HandleOAuth2CodeResponse.js.map
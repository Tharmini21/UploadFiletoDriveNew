"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalResponse = void 0;
const handler_1 = require("@smartsheet-extensions/handler");
const ChannelOutput_1 = require("../models/ChannelOutput");
const HttpResponse_1 = require("../models/HttpResponse");
const AbstractResponse_1 = require("./AbstractResponse");
class ExternalResponse extends AbstractResponse_1.AbstractResponse {
    constructor({ httpResponse, channelOutput, status, } = {}) {
        super(status);
        if (httpResponse)
            this.setHTTPResponse(httpResponse);
        if (channelOutput)
            this.setChannelOutput(channelOutput);
    }
    static create(props = {}) {
        return new ExternalResponse(props);
    }
    /**
     * Sets the HTTP response data for the challenge response.
     * @param httpResponse the HTTP response data.
     */
    setHTTPResponse(httpResponse) {
        this.httpResponse = HttpResponse_1.HttpResponse.create(httpResponse);
    }
    /**
     * Sets the channel output for the response.
     * @param channelOutput An array of channel output definitions.
     */
    setChannelOutput(channelOutput) {
        this.channelOutput = channelOutput;
    }
    /**
     * Adds one or more channel outputs to the response.
     * @param channelOutput One or more channel output definitions.
     */
    addChannelOutput(...channelOutput) {
        if (this.channelOutput === undefined) {
            this.channelOutput = [];
        }
        channelOutput.forEach(output => {
            this.channelOutput.push(ChannelOutput_1.ChannelOutput.create(output));
        });
    }
    toSerializableObject() {
        return {
            status: this.status,
            channelOutput: handler_1.serialize(this.channelOutput),
            externalCallReturn: handler_1.serialize(this.httpResponse),
        };
    }
}
exports.ExternalResponse = ExternalResponse;
//# sourceMappingURL=ExternalResponse.js.map
import { ExtensionResponse, SerializableClass, SerializableObject } from '@smartsheet-extensions/handler';
import { AbstractResponse } from './AbstractResponse';
export interface HandleOAuth2CodeResponse extends ExtensionResponse {
    access_token: string;
    token_type?: string;
    refresh_token?: string;
    expires_in?: number;
    grant_type?: string;
    metadata?: Record<string, string>;
    redirectMessage?: string;
    redirectTo?: string;
    settings?: SerializableObject;
}
export declare class HandleOAuth2CodeResponse extends AbstractResponse implements SerializableClass {
    access_token: string;
    token_type?: string;
    refresh_token?: string;
    expires_in?: number;
    grant_type?: string;
    metadata?: Record<string, string>;
    redirectMessage?: string;
    redirectTo?: string;
    settings?: SerializableObject;
    static create(props?: Partial<HandleOAuth2CodeResponse>): HandleOAuth2CodeResponse;
    constructor({ status, access_token, token_type, refresh_token, expires_in, grant_type, metadata, redirectMessage, redirectTo, settings, }?: Partial<HandleOAuth2CodeResponse>);
    toSerializableObject(): SerializableObject;
    /**
     * Sets updated settings after the authentication flow is complete.
     *
     * If this is left undefined then the settings will not be updated.
     * @param settings the updated settings.
     */
    setSettings(settings: SerializableObject): void;
    /**
     * Sets the oauth access token.
     * @param accessToken the oauth access token.
     */
    setAccessToken(accessToken: string): void;
    /**
     * Sets the oauth token type.
     * @param tokenType the oauth token type.
     */
    setTokenType(tokenType: string): void;
    /**
     * Sets the oauth refresh token.
     * @param refreshToken the oauth refresh token.
     */
    setRefreshToken(refreshToken: string): void;
    /**
     * Sets the number of seconds until that authentication is valid for.
     * @param expiresIn the number of seconds until that authentication is valid for.
     */
    setExpiresIn(expiresIn: number): void;
    /**
     * Sets the auth grant type.
     * @param grantType the oauth grant type.
     */
    setGrantType(grantType: string): void;
    /**
     * Sets additional metadata to be stored against the oauth token.
     * @param metadata additional metadata to be stored against the oauth token.
     */
    setMetadata(metadata: Record<string, string>): void;
    /**
     * Sets a URL that the user will be redirected to after they have completed the oauth flow.
     *
     * This will override ay value set for `redirectMessage`.
     * @param redirectTo a URL to redirect the user to.
     */
    setRedirectTo(redirectTo: string): void;
    /**
     * Sets a message to be displayed to the user after the have completed the oauth flow.
     *
     * If `redirectTo` is set, this will be ignored.
     * @param redirectMessage the redirect message.
     */
    setRedirectMessage(redirectMessage: string): void;
}
//# sourceMappingURL=HandleOAuth2CodeResponse.d.ts.map
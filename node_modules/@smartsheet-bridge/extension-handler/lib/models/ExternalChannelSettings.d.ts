import { SerializableClass, SerializableObject } from '@smartsheet-extensions/handler';
import { ChannelUserInfo } from './ChannelUserInfo';
import { OAuth2Data } from './OAuth2Data';
export interface ExternalChannelSettings {
    userId: string;
    threadId: string;
    data?: SerializableObject;
    runtimeData?: SerializableObject;
    channelName?: string;
    userInfo?: ChannelUserInfo;
    sync?: boolean;
    isGroup?: boolean;
}
/**
 * Parse the classic bridge payload into a more manageable format.
 * @param payload the classic bridge payload
 * @returns external channel settings.
 */
export declare function parseExternalChannelSettingsPayload(payload: any, invokerOAuth: OAuth2Data): ExternalChannelSettings;
export declare class ExternalChannelSettings implements SerializableClass {
    /**
     * The unique identifier for user in channel.
     */
    userId: string;
    /**
     * The unique identifier for the thread in the channel.
     */
    threadId: string;
    /**
     * Additional data stored against the user.
     */
    data?: SerializableObject;
    /**
     * Additional data that is passed to the next workflow but is not persisted.
     *
     * This is used if the extension requires unique data in order to respond or process which
     * should not, or is pointless, to persist.
     */
    runtimeData?: SerializableObject;
    /**
     * The name of the notification or chat channel.
     */
    channelName?: string;
    /**
     * An object that describes the user.
     */
    userInfo?: ChannelUserInfo;
    /**
     * States if the channel should be invoked synchronously.
     */
    sync?: boolean;
    /**
     * States if this describes a group thread.
     *
     * In a group thread it is possible for multiple users to interact with a single workflow,
     * for example to complete a poll or survey.
     */
    isGroup?: boolean;
    /**
     * The OAuth data linked to this channel settings user.
     *
     * These tokens are only generated for chat channels that implement the invoker OAuth flow.
     */
    oAuthData?: OAuth2Data;
    static create(props?: Partial<ExternalChannelSettings>): ExternalChannelSettings;
    constructor({ userId, threadId, data, runtimeData, channelName, userInfo, sync, isGroup, }?: Partial<ExternalChannelSettings>);
    /**
     * Sets the channel user identifier.
     * @param userId channel user identifier.
     */
    setUserID(userId: string): void;
    /**
     * Sets the channel thread identifier.
     * @param threadId channel thread identifier.
     */
    setThreadId(threadId: string): void;
    /**
     * Sets the user data.
     * @param data user data.
     */
    setData(data: SerializableObject): void;
    /**
     * Sets the user runtime data.
     *
     * Additional data that is passed to the next workflow but is not persisted.
     * @param runtimeData user runtime data.
     */
    setRuntimeData(runtimeData: SerializableObject): void;
    /**
     * Sets the channel name.
     * @param channelName channel name.
     */
    setChannelName(channelName: string): void;
    /**
     * Sets the channel user information.
     * @param userInfo user information.
     */
    setUserInfo(userInfo: ChannelUserInfo): void;
    /**
     * Sets if the channel should be invoked synchronously.
     * @param isSync if the channel is synchronous.
     */
    setIsSync(isSync: boolean): void;
    /**
     * Sets if the channel thread is a group thread.
     * @param isGroup if the channel thread is a group thread.
     */
    setIsGroup(isGroup: boolean): void;
    toSerializableObject(): SerializableObject;
}
//# sourceMappingURL=ExternalChannelSettings.d.ts.map
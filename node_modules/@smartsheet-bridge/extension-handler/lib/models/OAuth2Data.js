"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuth2Data = void 0;
class OAuth2Data {
    constructor({ access_token, token_type, refresh_token, expires_in, grant_type, metadata, } = {}) {
        if (access_token)
            this.setAccessToken(access_token);
        if (token_type)
            this.setTokenType(token_type);
        if (refresh_token)
            this.setRefreshToken(refresh_token);
        if (expires_in)
            this.setExpiresIn(expires_in);
        if (grant_type)
            this.setGrantType(grant_type);
        if (metadata)
            this.setMetadata(metadata);
    }
    static create(props = {}) {
        return new OAuth2Data(props);
    }
    /**
     * Sets the oauth access token.
     * @param accessToken the oauth access token.
     */
    setAccessToken(accessToken) {
        this.access_token = accessToken;
    }
    /**
     * Sets the oauth token type.
     * @param tokenType the oauth token type.
     */
    setTokenType(tokenType) {
        this.token_type = tokenType;
    }
    /**
     * Sets the oauth refresh token.
     * @param refreshToken the oauth refresh token.
     */
    setRefreshToken(refreshToken) {
        this.refresh_token = refreshToken;
    }
    /**
     * Sets the number of seconds until that authentication is valid for.
     * @param expiresIn the number of seconds until that authentication is valid for.
     */
    setExpiresIn(expiresIn) {
        this.expires_in = expiresIn;
    }
    /**
     * Sets the auth grant type.
     * @param grantType the oauth grant type.
     */
    setGrantType(grantType) {
        this.grant_type = grantType;
    }
    /**
     * Sets additional metadata to be stored against the oauth token.
     * @param metadata additional metadata to be stored against the oauth token.
     */
    setMetadata(metadata) {
        this.metadata = metadata;
    }
}
exports.OAuth2Data = OAuth2Data;
//# sourceMappingURL=OAuth2Data.js.map
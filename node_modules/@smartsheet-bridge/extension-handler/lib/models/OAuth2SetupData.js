"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuth2SetupData = void 0;
class OAuth2SetupData {
    constructor({ oauth2URI, clientId, scope, state, comment, extraParams, } = {}) {
        if (oauth2URI)
            this.setOAuth2URI(oauth2URI);
        if (clientId)
            this.setClientId(clientId);
        if (scope)
            this.setScope(scope);
        if (state)
            this.setState(state);
        if (comment)
            this.setComment(comment);
        if (extraParams)
            this.setExtraParams(extraParams);
    }
    static create(props = {}) {
        return new OAuth2SetupData(props);
    }
    /**
     * Sets the OAuth2 URI.
     * @param oauth2URI the OAuth2 URI.
     */
    setOAuth2URI(oauth2URI) {
        this.oauth2URI = oauth2URI;
    }
    /**
     * Sets the OAuth app client Id.he OAuth app client Id
     * @param clientId the OAuth app client Id.
     */
    setClientId(clientId) {
        this.clientId = clientId;
    }
    /**
     * Sets the OAuth scope.
     * @param scope the OAuth scope.
     */
    setScope(scope) {
        this.scope = scope;
    }
    /**
     * Sets the OAuth state.
     * @param state the OAuth state.
     */
    setState(state) {
        this.state = state;
    }
    /**
     * Sets a comment to display with the generated link.
     * @param comment an optional comment to display with link.
     */
    setComment(comment) {
        this.comment = comment;
    }
    /**
     * Sets additional parameters to be included in the OAuth2 request.
     * @param extraParams additional parameters to be included in the OAuth2 request.
     */
    setExtraParams(extraParams) {
        this.extraParams = extraParams;
    }
}
exports.OAuth2SetupData = OAuth2SetupData;
//# sourceMappingURL=OAuth2SetupData.js.map
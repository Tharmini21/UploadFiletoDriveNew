"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalChannelSettings = exports.parseExternalChannelSettingsPayload = void 0;
const handler_1 = require("@smartsheet-extensions/handler");
/**
 * Parse the classic bridge payload into a more manageable format.
 * @param payload the classic bridge payload
 * @returns external channel settings.
 */
function parseExternalChannelSettingsPayload(payload, invokerOAuth) {
    if (payload === undefined || payload == null) {
        return undefined;
    }
    const settings = new ExternalChannelSettings();
    settings.setChannelName(payload.channelName || undefined);
    settings.setData(payload.data || undefined);
    settings.setIsGroup(payload.isGroup || false);
    settings.setIsSync(payload.sync || false);
    settings.setRuntimeData(payload.runtimeCtx || undefined);
    settings.setThreadId(payload.threadId || payload.requestUUID || '');
    settings.setUserID(payload.userId || payload.userUUID || '');
    settings.setUserInfo(payload.userInfo || undefined);
    settings.oAuthData = invokerOAuth;
    return settings;
}
exports.parseExternalChannelSettingsPayload = parseExternalChannelSettingsPayload;
class ExternalChannelSettings {
    constructor({ userId, threadId, data, runtimeData, channelName, userInfo, sync, isGroup, } = {}) {
        if (userId)
            this.setUserID(userId);
        if (threadId)
            this.setThreadId(threadId);
        if (data)
            this.setData(data);
        if (runtimeData)
            this.setRuntimeData(runtimeData);
        if (channelName)
            this.setChannelName(channelName);
        if (userInfo)
            this.setUserInfo(userInfo);
        if (sync)
            this.setIsSync(sync);
        if (isGroup)
            this.setIsGroup(isGroup);
    }
    static create(props = {}) {
        return new ExternalChannelSettings(props);
    }
    /**
     * Sets the channel user identifier.
     * @param userId channel user identifier.
     */
    setUserID(userId) {
        this.userId = userId;
    }
    /**
     * Sets the channel thread identifier.
     * @param threadId channel thread identifier.
     */
    setThreadId(threadId) {
        this.threadId = threadId;
    }
    /**
     * Sets the user data.
     * @param data user data.
     */
    setData(data) {
        this.data = data;
    }
    /**
     * Sets the user runtime data.
     *
     * Additional data that is passed to the next workflow but is not persisted.
     * @param runtimeData user runtime data.
     */
    setRuntimeData(runtimeData) {
        this.runtimeData = runtimeData;
    }
    /**
     * Sets the channel name.
     * @param channelName channel name.
     */
    setChannelName(channelName) {
        this.channelName = channelName;
    }
    /**
     * Sets the channel user information.
     * @param userInfo user information.
     */
    setUserInfo(userInfo) {
        this.userInfo = userInfo;
    }
    /**
     * Sets if the channel should be invoked synchronously.
     * @param isSync if the channel is synchronous.
     */
    setIsSync(isSync) {
        this.sync = isSync;
    }
    /**
     * Sets if the channel thread is a group thread.
     * @param isGroup if the channel thread is a group thread.
     */
    setIsGroup(isGroup) {
        this.isGroup = isGroup;
    }
    toSerializableObject() {
        return {
            channelName: this.channelName,
            data: this.data,
            isGroup: this.isGroup,
            runtimeCTX: this.runtimeData,
            sync: this.sync,
            threadId: this.threadId,
            userId: this.userId,
            userInfo: handler_1.serialize(this.userInfo),
        };
    }
}
exports.ExternalChannelSettings = ExternalChannelSettings;
//# sourceMappingURL=ExternalChannelSettings.js.map
export interface OAuth2Data {
    access_token: string;
    token_type?: string;
    refresh_token?: string;
    expires_in?: number;
    grant_type?: string;
    metadata?: Record<string, string>;
}
export declare class OAuth2Data {
    access_token: string;
    token_type?: string;
    refresh_token?: string;
    expires_in?: number;
    grant_type?: string;
    metadata?: Record<string, string>;
    static create(props?: Partial<OAuth2Data>): OAuth2Data;
    constructor({ access_token, token_type, refresh_token, expires_in, grant_type, metadata, }?: Partial<OAuth2Data>);
    /**
     * Sets the oauth access token.
     * @param accessToken the oauth access token.
     */
    setAccessToken(accessToken: string): void;
    /**
     * Sets the oauth token type.
     * @param tokenType the oauth token type.
     */
    setTokenType(tokenType: string): void;
    /**
     * Sets the oauth refresh token.
     * @param refreshToken the oauth refresh token.
     */
    setRefreshToken(refreshToken: string): void;
    /**
     * Sets the number of seconds until that authentication is valid for.
     * @param expiresIn the number of seconds until that authentication is valid for.
     */
    setExpiresIn(expiresIn: number): void;
    /**
     * Sets the auth grant type.
     * @param grantType the oauth grant type.
     */
    setGrantType(grantType: string): void;
    /**
     * Sets additional metadata to be stored against the oauth token.
     * @param metadata additional metadata to be stored against the oauth token.
     */
    setMetadata(metadata: Record<string, string>): void;
}
//# sourceMappingURL=OAuth2Data.d.ts.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBasicFS = exports.createBasicTTY = exports.Logger = exports.Chalk = void 0;
const chalk = __importStar(require("chalk"));
const Winston = __importStar(require("winston"));
const regexp_1 = require("./formats/regexp");
const strip_1 = require("./formats/strip");
const tty_1 = require("./formats/tty");
const Logger_1 = require("./Logger");
exports.Chalk = chalk.default;
__exportStar(require("./errors/AbstractError"), exports);
__exportStar(require("./errors/UserError"), exports);
class LoggerInstance extends Logger_1.Logger {
    static getInstance() {
        if (!LoggerInstance.instance) {
            LoggerInstance.instance = new LoggerInstance();
        }
        return LoggerInstance.instance;
    }
}
exports.Logger = LoggerInstance.getInstance();
exports.createBasicTTY = ({ debugPattern, levelFilter = 'info', }) => new Winston.transports.Console({
    level: levelFilter.toLowerCase(),
    format: Winston.format.combine(regexp_1.regexp({ pattern: debugPattern }), tty_1.tty()),
});
exports.createBasicFS = ({ path }) => new Winston.transports.File({
    options: { flags: 'w' },
    level: 'verbose',
    format: Winston.format.combine(tty_1.tty(), strip_1.strip()),
    filename: path,
});
//# sourceMappingURL=index.js.map
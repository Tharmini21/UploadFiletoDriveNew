/// <reference types="node" />
import { Writable } from 'stream';
import * as Winston from 'winston';
import { LogLevel } from './Levels';
export interface LogEntry {
    message: string;
    level: LogLevel;
    grouped?: boolean;
    pattern?: string;
}
export declare class Logger {
    private hue;
    private startTime;
    private logger;
    constructor(options?: Omit<Winston.LoggerOptions, 'levels'>);
    addTransport(transport: Writable): void;
    info(...args: string[]): void;
    verbose(...args: string[]): void;
    warn(...args: string[]): void;
    error(error: Error, exit?: boolean): void;
    assert(condition: boolean, message: string): void;
    start(title: string): void;
    end(title?: string): void;
    debug(title: string): (...args: any[]) => void;
    protected isTiming(): boolean;
    protected format(...args: any[]): string;
    protected write({ message, level, ...meta }: LogEntry, callback?: () => void): boolean;
}
//# sourceMappingURL=Logger.d.ts.map
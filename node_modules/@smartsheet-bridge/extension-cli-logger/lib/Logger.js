"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const assert_1 = require("assert");
const chalk_1 = __importDefault(require("chalk"));
const os_1 = require("os");
const Util = __importStar(require("util"));
const Winston = __importStar(require("winston"));
const AbstractError_1 = require("./errors/AbstractError");
const Levels_1 = require("./Levels");
const indentNewLines = (replacement = `${os_1.EOL}${ASCII_TAB} `) => (arg) => {
    return Util.formatWithOptions({ colors: true, compact: false, breakLength: Infinity, depth: 7 }, arg).replace(new RegExp(os_1.EOL, 'g'), replacement);
};
const ASCII_TAB = '  ';
const GOLDEN_RATIO = 0.618033988749895;
const ERROR = chalk_1.default.hex('#E57373');
const WARN = chalk_1.default.hex('#FFF176');
class Logger {
    constructor(options = {}) {
        this.hue = Math.random();
        this.logger = Winston.createLogger(Object.assign(Object.assign({}, options), { levels: Levels_1.LOG_LEVELS }));
    }
    addTransport(transport) {
        this.logger.add(transport);
    }
    info(...args) {
        const message = this.format(...args);
        this.write({ level: 'info', message });
    }
    verbose(...args) {
        const message = this.format(...args);
        this.write({ level: 'verbose', message });
    }
    warn(...args) {
        const message = this.format(WARN(...args));
        this.write({ level: 'warn', message });
    }
    error(error, exit = true) {
        let errString = error.message;
        if (error instanceof AbstractError_1.AbstractError && error.toOut) {
            errString = error.toOut();
        }
        else if (error.stack) {
            errString = error.stack;
        }
        const message = this.format(ERROR(errString));
        const cb = exit ? () => process.exit(1) : () => { };
        this.write({ level: 'error', message }, cb);
    }
    assert(condition, message) {
        if (!condition) {
            throw new assert_1.AssertionError({
                message,
                stackStartFn: this.assert,
            });
        }
    }
    start(title) {
        if (this.isTiming()) {
            this.end();
            this.start(title);
        }
        else {
            this.startTime = Date.now();
            this.write({
                level: 'info',
                grouped: true,
                message: title,
            });
        }
    }
    end(title = 'Completed') {
        if (this.isTiming()) {
            const duration = new Date(Date.now() - this.startTime);
            this.startTime = undefined;
            this.write({
                level: 'info',
                grouped: false,
                message: [
                    title,
                    `in ${duration.getUTCSeconds()}.${Math.round(duration.getUTCMilliseconds() / 10)}s`,
                ].join(' '),
            });
        }
    }
    debug(title) {
        this.hue += GOLDEN_RATIO;
        this.hue %= 1;
        const color = chalk_1.default.hsv(this.hue * 360, 50, 95);
        return (...args) => {
            const message = this.format(color(`${title}:`), ...args);
            this.write({
                level: 'debug',
                message,
                pattern: title,
            });
        };
    }
    isTiming() {
        return this.startTime !== undefined;
    }
    format(...args) {
        if (this.isTiming()) {
            return args
                .map(indentNewLines(`${os_1.EOL}${ASCII_TAB}${ASCII_TAB}`))
                .join(' ');
        }
        return args.map(indentNewLines(`${os_1.EOL}${ASCII_TAB}`)).join(' ');
    }
    write(_a, callback) {
        var { message, level } = _a, meta = __rest(_a, ["message", "level"]);
        if (this.logger.transports.length > 0) {
            return !!this.logger.log(level, message, meta, callback);
        }
        return true;
    }
}
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map
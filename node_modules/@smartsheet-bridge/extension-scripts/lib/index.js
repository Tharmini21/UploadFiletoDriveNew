#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const cosmiconfig_1 = require("cosmiconfig");
const yargs_1 = __importDefault(require("yargs"));
const accountCommand_1 = require("./commands/accountCommand");
const buildCommand_1 = require("./commands/buildCommand");
const deployCommand_1 = require("./commands/deployCommand");
const logsCommand_1 = require("./commands/logsCommand");
const revokeCommand_1 = require("./commands/revokeCommand");
const middlewareLogger_1 = require("./middleware/middlewareLogger");
const middlewareVersionCheck_1 = require("./middleware/middlewareVersionCheck");
const options_1 = __importStar(require("./options"));
const accountService_1 = require("./services/accountService");
const buildService_1 = require("./services/buildService");
const deployService_1 = require("./services/deployService");
const logsService_1 = require("./services/logsService");
const revokeService_1 = require("./services/revokeService");
__exportStar(require("./types"), exports);
const configSearch = cosmiconfig_1.cosmiconfigSync(options_1.RC_NAME).search();
let config = {
    extends: '@smartsheet-bridge/extensionrc-standard',
};
if (configSearch && configSearch.config) {
    config = configSearch.config;
}
const handleFail = (msg, err) => {
    if (err) {
        extension_cli_logger_1.Logger.error(err);
    }
};
yargs_1.default
    .env(options_1.RC_NAME.toUpperCase())
    .scriptName('extension-scripts')
    .config(config)
    .middleware(middlewareLogger_1.middlewareLogger, true)
    .middleware(middlewareVersionCheck_1.middlewareVersionCheck)
    .options(options_1.default)
    .command(accountCommand_1.createAccountCommand(accountService_1.createAccountService))
    .command(buildCommand_1.createBuildCommand(buildService_1.createBuildService))
    .command(deployCommand_1.createDeployCommand(deployService_1.createDeployService, buildService_1.createBuildService))
    .command(revokeCommand_1.createRevokeCommand(revokeService_1.createRevokeService))
    .command(logsCommand_1.createLogsCommand(logsService_1.createLogsService))
    .demandCommand()
    .recommendCommands()
    .help()
    .alias('h', 'help')
    .alias('v', 'version')
    .fail(handleFail)
    .parse();
//# sourceMappingURL=index.js.map
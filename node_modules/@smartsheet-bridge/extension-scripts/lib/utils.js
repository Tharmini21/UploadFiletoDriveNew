"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.maskKey = exports.buildEnvironmentVariables = exports.getSpec = exports.getManifest = void 0;
const find_up_1 = require("find-up");
const fs_extra_1 = require("fs-extra");
const normalize_package_data_1 = __importDefault(require("normalize-package-data"));
const EnvParserError_1 = require("./errors/EnvParserError");
const SpecNotFoundError_1 = require("./errors/SpecNotFoundError");
exports.getManifest = () => {
    const manifestPath = find_up_1.sync('package.json');
    const manifest = manifestPath ? fs_extra_1.readJSONSync(manifestPath) : {};
    normalize_package_data_1.default(manifest);
    return manifest;
};
exports.getSpec = (filename) => {
    const specPath = find_up_1.sync(filename);
    if (specPath === undefined || specPath === null) {
        throw new SpecNotFoundError_1.SpecNotFoundError(filename, process.cwd());
    }
    const spec = specPath ? fs_extra_1.readJSONSync(specPath) : {};
    if (spec === undefined || Object.keys(spec).length === 0) {
        throw new SpecNotFoundError_1.SpecNotFoundError(filename, specPath);
    }
    return spec;
};
const normalizeEnv = (acc, entry) => {
    let envKey;
    let envValue;
    if (typeof entry === 'string') {
        [envKey, envValue] = entry.split(':');
    }
    else if (Array.isArray(entry)) {
        [envKey, envValue] = entry;
    }
    if (envKey === undefined ||
        envKey === '' ||
        envValue === undefined ||
        envValue === '') {
        throw new EnvParserError_1.EnvParserError(`${envKey}:${envValue}`);
    }
    return Object.assign(Object.assign({}, acc), { [envKey.trim()]: envValue.trim() });
};
exports.buildEnvironmentVariables = (env) => {
    if (Array.isArray(env)) {
        return env.reduce((acc, entry) => {
            if (typeof entry === 'string') {
                return normalizeEnv(acc, entry);
            }
            return Object.assign(Object.assign({}, acc), exports.buildEnvironmentVariables(entry));
        }, {});
    }
    if (typeof env === 'object') {
        return Object.entries(env).reduce((acc, entry) => normalizeEnv(acc, entry), {});
    }
    return {};
};
exports.maskKey = (str) => str.replace(/.(?=.{4})/g, '*');
//# sourceMappingURL=utils.js.map
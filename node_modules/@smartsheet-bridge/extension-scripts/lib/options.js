"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exclude = exports.include = exports.extension = exports.specFile = exports.alias = exports.key = exports.url = exports.urlCoerce = exports.LOGLEVEL_OPTIONS = exports.RC_NAME = void 0;
const bridge_sdk_1 = require("@smartsheet-bridge/bridge-sdk");
exports.RC_NAME = `extension`;
exports.LOGLEVEL_OPTIONS = ['info', 'verbose', 'warn', 'error', 'silent'];
const loglevel = {
    alias: 'l',
    global: true,
    description: 'Level of output logs',
    default: 'info',
    choices: exports.LOGLEVEL_OPTIONS,
};
const debug = {
    alias: 'd',
    global: true,
    description: 'Regex pattern to match debug logs by',
    default: '',
    coerce: (d) => (d === '' ? undefined : d),
};
const options = {
    loglevel,
    debug,
};
exports.default = options;
exports.urlCoerce = (urlInput) => {
    const { protocol, accountName, hostName } = bridge_sdk_1.parseAccountURL(urlInput);
    return `${protocol}://${accountName}.${hostName}`;
};
exports.url = {
    type: 'string',
    describe: 'URL of your Bridge by Smartsheet account.',
    coerce: exports.urlCoerce,
};
exports.key = {
    type: 'string',
    describe: 'Authorized API key for you Bridge by Smartsheet account.',
};
exports.alias = {
    type: 'string',
    default: 'default',
    describe: 'Account aliases for URLs and KEYs.',
};
exports.specFile = {
    global: true,
    default: 'extension.json',
    description: 'Filename of extension specification file.',
};
exports.extension = {
    description: 'The name of the extension to revoke. Defaults to current working directory.',
    type: 'string',
};
exports.include = {
    type: 'string',
    default: '**/**',
    description: 'Pattern to include filenames when packaging extension.',
};
exports.exclude = {
    type: 'string',
    description: 'Pattern or array of patterns to exclude filenames when packaging extension.',
    default: '',
    coerce: (excl) => [].concat(excl || []),
};
//# sourceMappingURL=options.js.map
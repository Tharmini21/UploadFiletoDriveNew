import { InferredOptionTypes } from 'yargs';
export declare const RC_NAME = "extension";
export declare const LOGLEVEL_OPTIONS: string[];
declare const options: {
    loglevel: {
        alias: string;
        global: boolean;
        description: string;
        default: string;
        choices: string[];
    };
    debug: {
        alias: string;
        global: boolean;
        description: string;
        default: string;
        coerce: (d: string) => string;
    };
};
export declare type AuthOptions = InferredOptionTypes<{
    url: typeof url;
    key: typeof key;
}>;
export declare type CLICommonArguments = InferredOptionTypes<typeof options>;
export default options;
export declare const urlCoerce: (urlInput: string) => string;
export declare const url: {
    type: "string";
    describe: string;
    coerce: (urlInput: string) => string;
};
export declare const key: {
    type: "string";
    describe: string;
};
export declare const alias: {
    type: "string";
    default: string;
    describe: string;
};
export declare const specFile: {
    global: boolean;
    default: string;
    description: string;
};
export declare const extension: {
    description: string;
    type: "string";
};
export declare const include: {
    type: "string";
    default: string;
    description: string;
};
export declare const exclude: {
    type: "string";
    description: string;
    default: string;
    coerce: (excl: string | string[]) => string[];
};
//# sourceMappingURL=options.d.ts.map
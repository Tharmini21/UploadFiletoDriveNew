"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.middlewareVersionCheck = exports.getUpgradeWarning = void 0;
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const has_yarn_1 = __importDefault(require("has-yarn"));
const latest_version_1 = __importDefault(require("latest-version"));
const semver_1 = __importDefault(require("semver"));
const COLORS = {
    major: extension_cli_logger_1.Chalk.hex('#E57373'),
    minor: extension_cli_logger_1.Chalk.yellow,
    patch: extension_cli_logger_1.Chalk.green,
    premajor: extension_cli_logger_1.Chalk.hex('#E57373'),
    preminor: extension_cli_logger_1.Chalk.yellow,
    prepatch: extension_cli_logger_1.Chalk.green,
    prerelease: extension_cli_logger_1.Chalk.green,
};
exports.getUpgradeWarning = (upgradeType) => {
    let msg = `This is a '${upgradeType}' `;
    if (upgradeType !== 'prerelease')
        msg = `${msg}release `;
    switch (upgradeType) {
        case 'major':
        case 'premajor':
            msg += `which likely introduces some breaking changes.\nSee release for more details.`;
            break;
        case 'preminor':
        case 'prepatch':
        case 'prerelease':
            msg += `which may introduce some breaking changes.\nSee release for more details.`;
            break;
        default:
            msg += `and is considered safe to upgrade.`;
            break;
    }
    return msg;
};
exports.middlewareVersionCheck = () => __awaiter(void 0, void 0, void 0, function* () {
    const { name, version } = require('../../package.json');
    extension_cli_logger_1.Logger.verbose('Version', extension_cli_logger_1.Chalk.cyan(version));
    const UPGRADE_YARN = `yarn upgrade ${name} --latest -dev`;
    const UPGRADE_NPM = `npm install ${name} --save-dev`;
    try {
        const latestVersion = yield latest_version_1.default(name, { version: 'latest' });
        if (semver_1.default.gt(latestVersion, version)) {
            const versionDiff = semver_1.default.diff(latestVersion, version);
            const color = COLORS[versionDiff];
            const versionStr = color(`v${version}`);
            const latestVersionStr = extension_cli_logger_1.Chalk.green(`v${latestVersion}`);
            const msg = `A newer version of 'extension-scripts' is available!\nUpgrade from \`${versionStr}\` to \`${latestVersionStr}\` by running \n\n\t${extension_cli_logger_1.Chalk.cyan(has_yarn_1.default() ? UPGRADE_YARN : UPGRADE_NPM)}\n\n${extension_cli_logger_1.Chalk.italic(exports.getUpgradeWarning(versionDiff))}\n`;
            extension_cli_logger_1.Logger.warn(msg);
        }
    }
    catch (e) {
        extension_cli_logger_1.Logger.warn('Unable to check version compatibility.');
    }
});
//# sourceMappingURL=middlewareVersionCheck.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.middlewareLogger = void 0;
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const path_1 = require("path");
const LoglevelNotRecognized_1 = require("../errors/LoglevelNotRecognized");
const options_1 = __importStar(require("../options"));
const validatedLoglevel = (lvl) => typeof lvl === 'string' && options_1.LOGLEVEL_OPTIONS.includes(lvl.toLowerCase());
exports.middlewareLogger = argv => {
    extension_cli_logger_1.Logger.addTransport(extension_cli_logger_1.createBasicFS({
        path: path_1.join(process.cwd(), 'extension.log'),
    }));
    const userLoglevel = (argv.loglevel || 'info').toLowerCase();
    const isValidLoglevel = validatedLoglevel(userLoglevel);
    argv.loglevel = isValidLoglevel ? userLoglevel : 'info';
    argv[options_1.default.loglevel.alias] = argv.loglevel;
    extension_cli_logger_1.Logger.addTransport(extension_cli_logger_1.createBasicTTY({
        levelFilter: argv.loglevel,
        debugPattern: argv.debug,
    }));
    const debug = extension_cli_logger_1.Logger.debug('extension-scripts');
    debug(`Setting TTY loglevel to ${argv.loglevel}`);
    debug(argv);
    if (!isValidLoglevel) {
        extension_cli_logger_1.Logger.warn(new LoglevelNotRecognized_1.LoglevelNotRecognized(userLoglevel).toOut());
    }
};
//# sourceMappingURL=middlewareLogger.js.map
import { Arguments as YargsArgs, InferredOptionType, Options, PositionalOptions } from 'yargs';
import type { AccountConfig } from './commands/accountCommand';
import type { BuildConfig } from './commands/buildCommand';
import type { DeployConfig } from './commands/deployCommand';
import type { LogsConfig } from './commands/logsCommand';
import type { RevokeConfig } from './commands/revokeCommand';
import type { CLICommonArguments } from './options';
export declare const createOption: (option: any) => any;
export declare type InferArgumentOut<O extends Options | PositionalOptions> = O extends {
    coerce: (arg: any) => infer T;
} ? T : InferredOptionType<O>;
export declare type InferArgumentIn<O extends Options | PositionalOptions> = O extends {
    coerce: (arg: infer T) => any;
} ? T : InferredOptionType<O>;
export declare type InferArgumentsOut<O extends {
    [key: string]: Options;
}> = {
    [key in keyof O]: InferArgumentOut<O[key]>;
};
export declare type InferArgumentsIn<O extends {
    [key: string]: Options;
}> = {
    [key in keyof O]: InferArgumentIn<O[key]>;
};
export declare type CLIArguments<CommandArguments extends {} = {}> = YargsArgs<CommandArguments & CLICommonArguments>;
export declare type CLIConfig = Partial<CLICommonArguments & BuildConfig & DeployConfig & LogsConfig & RevokeConfig & AccountConfig>;
//# sourceMappingURL=types.d.ts.map
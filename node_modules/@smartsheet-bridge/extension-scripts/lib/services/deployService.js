"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDeployService = void 0;
const bridge_sdk_1 = require("@smartsheet-bridge/bridge-sdk");
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const archiver_1 = __importDefault(require("archiver"));
const crypto_1 = require("crypto");
const fs_extra_1 = require("fs-extra");
const memfs_1 = require("memfs");
const multistream_1 = require("multistream");
const Path = __importStar(require("path"));
const semver = __importStar(require("semver"));
const utils_1 = require("../utils");
const bridgeService_1 = require("./bridgeService");
const debug = extension_cli_logger_1.Logger.debug('deployService');
const VIRTUAL_FILE = '/extension.zip';
exports.createDeployService = ({ host, auth, options: { include, exclude, symlinks, specFile, env }, }) => {
    debug('options', { include, exclude, symlinks, specFile, env });
    const sdk = bridgeService_1.createBridgeService(host, auth);
    const archivePkg = () => __awaiter(void 0, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const streams = [];
            const output = memfs_1.vol.createWriteStream(VIRTUAL_FILE);
            const hash = crypto_1.createHash('sha256');
            hash.setEncoding('hex');
            const archive = archiver_1.default('zip', {
                zlib: { level: 9 },
            });
            hash.on('finish', () => {
                resolve(hash.read());
            });
            output.on('close', () => {
                multistream_1.obj(streams.sort().map(s => {
                    return fs_extra_1.createReadStream(s);
                })).pipe(hash);
            });
            archive.on('entry', (data) => {
                if (data.type === 'file') {
                    debug(data);
                    streams.push(data.sourcePath);
                }
            });
            archive.on('warning', err => {
                reject(err);
            });
            archive.on('error', err => {
                reject(err);
            });
            archive.pipe(output);
            debug('include', include);
            debug('exclude', exclude);
            archive.glob(include, {
                cwd: process.cwd(),
                dot: false,
                ignore: exclude,
                follow: symlinks,
            }, {});
            archive.finalize();
        });
    });
    const uploadSpec = (checksum) => __awaiter(void 0, void 0, void 0, function* () {
        const spec = utils_1.getSpec(specFile);
        const data = Object.assign(Object.assign({}, spec), { invoker: { upload: true, checksum }, appToken: 'APP_TOKEN' });
        const appTokenPath = Path.resolve(process.cwd(), 'app-token.js');
        if (fs_extra_1.pathExistsSync(appTokenPath)) {
            data.appToken = require(appTokenPath);
            extension_cli_logger_1.Logger.verbose('App token', extension_cli_logger_1.Chalk.cyan(utils_1.maskKey(data.appToken)));
        }
        else {
            extension_cli_logger_1.Logger.verbose('App token', 'not included');
        }
        const response = yield sdk.extension.uploadSpec({ data });
        return response && response.data && response.data.uploadRef;
    });
    const uploadPkg = (grpc, caller) => __awaiter(void 0, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const client = grpc.uploadPluginCode((error, response) => {
                if (response) {
                    debug('UPLOAD CODE', 'response', response);
                    if (response.error) {
                        return reject(new extension_cli_logger_1.UserError(`${response.error.httpStatus} ${response.error.code}`, response.error.description));
                    }
                    if (response.runtimeVersion !== undefined &&
                        semver.clean(response.runtimeVersion) !==
                            semver.clean(process.version)) {
                        extension_cli_logger_1.Logger.warn(`Your development environment (Node.js ${process.version}) does not match Bridge by Smartsheet's production environment (Node.js v${response.runtimeVersion})! This may lead to unexpected runtime errors. Please refer to our documentation for more info.`);
                    }
                    return resolve();
                }
                if (error) {
                    return reject(new Error(error));
                }
                return reject(new Error('Something went wrong!'));
            });
            extension_cli_logger_1.Logger.verbose('Install UUID', extension_cli_logger_1.Chalk.cyan(caller.installUUID));
            extension_cli_logger_1.Logger.verbose('Revision ID', extension_cli_logger_1.Chalk.cyan(caller.revision));
            client.write({
                caller,
            });
            const stream = memfs_1.vol.createReadStream(VIRTUAL_FILE);
            stream
                .on('data', chunk => {
                extension_cli_logger_1.Logger.verbose('UPLOAD CODE', `${extension_cli_logger_1.Chalk.cyan(chunk.length)} Bytes`);
                client.write({
                    data: chunk,
                });
            })
                .on('end', () => {
                client.end();
            });
        });
    });
    const setEnvironmentVariables = (grpc, caller) => __awaiter(void 0, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            grpc.setPluginPrivateKeys({
                caller,
                keys: env,
            }, (err, response) => {
                if (response !== undefined &&
                    response.error !== undefined &&
                    response.error !== null) {
                    return reject(response.error);
                }
                if (err !== undefined && err !== null) {
                    return reject(err);
                }
                return resolve();
            });
        });
    });
    const activateRevision = (caller) => __awaiter(void 0, void 0, void 0, function* () {
        return sdk.extension.activateRevision({
            extensionUUID: caller.pluginUUID,
            revision: caller.revision,
        }, {});
    });
    const hasENVVars = () => env !== undefined && Object.keys(env).length > 0;
    return () => __awaiter(void 0, void 0, void 0, function* () {
        extension_cli_logger_1.Logger.start('Authenticating platform');
        const { data: { pluginDataService: { domain, port }, }, } = yield sdk.platform.get();
        extension_cli_logger_1.Logger.verbose('Platform', extension_cli_logger_1.Chalk.cyan(`${domain}:${port}`));
        extension_cli_logger_1.Logger.start('Bundling extension');
        const checksum = yield archivePkg();
        extension_cli_logger_1.Logger.verbose('checksum', extension_cli_logger_1.Chalk.cyan(checksum));
        extension_cli_logger_1.Logger.start('Uploading specification');
        const caller = yield uploadSpec(checksum);
        debug('caller', caller);
        if (!caller) {
            extension_cli_logger_1.Logger.end();
            extension_cli_logger_1.Logger.warn('Skipping upload!', 'Extension unchanged since last deployment.');
        }
        else {
            extension_cli_logger_1.Logger.start(`Creating connection`);
            const client = bridge_sdk_1.createGRPCClient(`${domain}:${port}`);
            extension_cli_logger_1.Logger.start('Uploading bundle');
            yield uploadPkg(client, caller);
            extension_cli_logger_1.Logger.start('Activating revision');
            yield activateRevision(caller);
            if (hasENVVars()) {
                extension_cli_logger_1.Logger.start('Setting environment variables');
                yield setEnvironmentVariables(client, caller);
            }
        }
        extension_cli_logger_1.Logger.end();
    });
};
//# sourceMappingURL=deployService.js.map
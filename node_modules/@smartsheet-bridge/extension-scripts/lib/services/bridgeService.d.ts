export declare const createBridgeService: (host: string, auth: string) => {
    instance: import("@smartsheet-bridge/bridge-sdk").BridgeHTTPInstance;
    extension: {
        caller: (options: import("@smartsheet-bridge/bridge-sdk/lib/http/extension").ExtensionUUIDOptions, config?: import("@smartsheet-bridge/bridge-sdk").BridgeHTTPRequestConfig) => Promise<import("@smartsheet-bridge/bridge-sdk").BridgeHTTPResponse<{
            caller?: import("@smartsheet-bridge/bridge-sdk").Caller;
        }>>;
        revoke: (options: import("@smartsheet-bridge/bridge-sdk/lib/http/extension").RevokeOptions, config?: import("@smartsheet-bridge/bridge-sdk").BridgeHTTPRequestConfig) => Promise<import("@smartsheet-bridge/bridge-sdk").BridgeHTTPResponse<any>>;
        uploadSpec: (options: import("@smartsheet-bridge/bridge-sdk/lib/http/extension").UploadSpecOptions, config?: import("@smartsheet-bridge/bridge-sdk").BridgeHTTPRequestConfig) => Promise<import("@smartsheet-bridge/bridge-sdk").BridgeHTTPResponse<{
            uploadRef?: import("@smartsheet-bridge/bridge-sdk").Caller;
        }>>;
        activateRevision: (options: import("@smartsheet-bridge/bridge-sdk/lib/http/extension").ActivateRevisionOptions, config?: import("@smartsheet-bridge/bridge-sdk").BridgeHTTPRequestConfig) => Promise<import("@smartsheet-bridge/bridge-sdk").BridgeHTTPResponse<{
            uploadRef?: import("@smartsheet-bridge/bridge-sdk").Caller;
        }>>;
    };
    platform: {
        get: (config?: import("@smartsheet-bridge/bridge-sdk").BridgeHTTPRequestConfig) => Promise<import("@smartsheet-bridge/bridge-sdk").BridgeHTTPResponse<any>>;
    };
    workflowRun: {
        query: (options: import("@smartsheet-bridge/bridge-sdk/lib/http/createQuery").BridgeHTTPQuery, config?: import("@smartsheet-bridge/bridge-sdk").BridgeHTTPRequestConfig) => Promise<import("@smartsheet-bridge/bridge-sdk").BridgeHTTPResponse<import("@smartsheet-bridge/bridge-sdk/lib/http/createQuery").BridgeHTTPQueryResponse<import("@smartsheet-bridge/bridge-sdk").WorkflowRun>>>;
        fetch: (options: {
            requestUUID: string;
            objectUUID: string;
        }, config?: import("@smartsheet-bridge/bridge-sdk").BridgeHTTPRequestConfig) => Promise<import("@smartsheet-bridge/bridge-sdk").BridgeHTTPResponse<import("@smartsheet-bridge/bridge-sdk").WorkflowRun>>;
    };
};
//# sourceMappingURL=bridgeService.d.ts.map
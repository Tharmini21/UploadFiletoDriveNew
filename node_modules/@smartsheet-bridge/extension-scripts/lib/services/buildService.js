"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBuildService = void 0;
const core_1 = require("@babel/core");
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const fs_extra_1 = require("fs-extra");
const glob_1 = require("glob");
const path_1 = require("path");
const debug = extension_cli_logger_1.Logger.debug('buildService');
exports.createBuildService = ({ src, out, options: { include, exclude, clean = true }, }) => {
    process.env.BROWSERSLIST_IGNORE_OLD_DATA = 'true';
    extension_cli_logger_1.Logger.start('Reading configuration');
    debug('src', src);
    debug('out', out);
    debug('options', { include, exclude, clean });
    const cwd = process.cwd();
    const srcDir = path_1.resolve(cwd, src);
    const outDir = path_1.resolve(cwd, out);
    extension_cli_logger_1.Logger.verbose(`Found ${extension_cli_logger_1.Chalk.green('src')} directory`, extension_cli_logger_1.Chalk.cyan(srcDir));
    extension_cli_logger_1.Logger.verbose(`Found ${extension_cli_logger_1.Chalk.green('out')} directory`, extension_cli_logger_1.Chalk.cyan(outDir));
    debug('Include', extension_cli_logger_1.Chalk.cyan(include));
    debug('Exclude', exclude.map(excl => `\n  - ${extension_cli_logger_1.Chalk.cyan(excl)}`).join(''));
    extension_cli_logger_1.Logger.end();
    if (clean) {
        extension_cli_logger_1.Logger.start('Cleaning `out` folder');
        fs_extra_1.emptyDirSync(outDir);
        extension_cli_logger_1.Logger.end();
    }
    const build = () => {
        const allFiles = glob_1.glob.sync(include, {
            ignore: exclude,
            cwd: srcDir,
            nodir: true,
        });
        debug('allFiles', allFiles);
        extension_cli_logger_1.Logger.start(`Building ${extension_cli_logger_1.Chalk.cyan(allFiles.length)} files`);
        allFiles.forEach(fileName => {
            extension_cli_logger_1.Logger.verbose(`Building ${extension_cli_logger_1.Chalk.cyan(fileName)}`);
            const absSrcPath = path_1.resolve(srcDir, fileName);
            const { name, ext, dir } = path_1.parse(fileName);
            const absOutDir = path_1.resolve(outDir, dir);
            const absOutPath = path_1.format({
                ext: '.js',
                dir: absOutDir,
                name,
            });
            const babelOpts = {
                presets: [[require('@babel/preset-env'), { targets: { node: '12' } }]],
            };
            if (ext === '.ts') {
                babelOpts.presets.push(require('@babel/preset-typescript'));
            }
            debug(`Transforming ${extension_cli_logger_1.Chalk.cyan(name)}`, absSrcPath);
            const { code } = core_1.transformFileSync(absSrcPath, babelOpts);
            debug(`Writing ${extension_cli_logger_1.Chalk.cyan(name)}`, absOutPath);
            fs_extra_1.outputFileSync(absOutPath, code, { encoding: 'utf8' });
        });
        extension_cli_logger_1.Logger.end();
    };
    return build;
};
//# sourceMappingURL=buildService.js.map
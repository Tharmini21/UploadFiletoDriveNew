"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAccountService = void 0;
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const dotpref_1 = require("dotpref");
const AliasNotFoundError_1 = require("../errors/AliasNotFoundError");
const KeyNotFoundError_1 = require("../errors/KeyNotFoundError");
const URLNotFoundError_1 = require("../errors/URLNotFoundError");
const debug = extension_cli_logger_1.Logger.debug('accountService');
exports.createAccountService = () => {
    const { set, get, filePath } = dotpref_1.createPref({
        defaults: { account: {} },
        name: 'com.smartsheet.bridge.extension-scripts',
    });
    debug('Preferences will be stored at', filePath);
    const saveAccount = (alias, { url, key }) => {
        if (typeof alias !== 'string') {
            throw new AliasNotFoundError_1.AliasNotFoundError(alias);
        }
        if (typeof url !== 'string') {
            throw new URLNotFoundError_1.URLNotFoundError(`account ${alias}`);
        }
        if (typeof key !== 'string') {
            throw new KeyNotFoundError_1.KeyNotFoundError(`account ${alias}`);
        }
        const account = get('account');
        set('account', Object.assign(Object.assign({}, account), { [alias]: {
                url,
                key,
            } }));
    };
    const getAccount = (alias) => {
        return get('account')[alias];
    };
    const removeAccount = (alias) => {
        const _a = get('account'), _b = alias, accountToBeRemoved = _a[_b], others = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
        set('account', others);
        return get('account')[alias];
    };
    const listAccounts = () => {
        const accountMap = get('account');
        return Object.keys(accountMap).map(alias => (Object.assign({ alias }, accountMap[alias])));
    };
    return {
        getAccount,
        saveAccount,
        removeAccount,
        listAccounts,
    };
};
//# sourceMappingURL=accountService.js.map
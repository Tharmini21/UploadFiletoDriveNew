"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRevokeService = void 0;
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const ExtensionInUseError_1 = require("../errors/ExtensionInUseError");
const utils_1 = require("../utils");
const bridgeService_1 = require("./bridgeService");
const debug = extension_cli_logger_1.Logger.debug('revokeService');
exports.createRevokeService = ({ host, auth, options: { force, specFile, name }, }) => {
    const sdk = bridgeService_1.createBridgeService(host, auth);
    return () => __awaiter(void 0, void 0, void 0, function* () {
        extension_cli_logger_1.Logger.start('Reading extension');
        const spec = utils_1.getSpec(specFile);
        const extensionName = name || spec.name;
        extension_cli_logger_1.Logger.info('Extension name', extension_cli_logger_1.Chalk.cyan(extensionName));
        extension_cli_logger_1.Logger.start('Revoking extension');
        try {
            yield sdk.extension.revoke({ extensionUUID: extensionName, force });
        }
        catch (err) {
            debug(err);
            if (err.response !== undefined && err.response.data !== undefined) {
                if (err.response.status === 409 && err.response.data !== undefined) {
                    throw new ExtensionInUseError_1.ExtensionInUseError(extensionName, err.response.data.templates);
                }
                else if (err.response.status === 404) {
                    throw new extension_cli_logger_1.UserError('Extension not found!', `No extension with the name '${extension_cli_logger_1.Chalk.cyan(extensionName)}' exists on your account.`);
                }
            }
            throw new extension_cli_logger_1.UserError('Internal Error!', `Something went wrong when revoking '${extension_cli_logger_1.Chalk.cyan(extensionName)}' from your account.`);
        }
        extension_cli_logger_1.Logger.end();
    });
};
//# sourceMappingURL=revokeService.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogsService = void 0;
const bridge_sdk_1 = require("@smartsheet-bridge/bridge-sdk");
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const inquirer_1 = require("inquirer");
const utils_1 = require("../utils");
const bridgeService_1 = require("./bridgeService");
exports.createLogsService = ({ host, auth, options: { milliseconds, specFile, name: extensionName }, }) => {
    const sdk = bridgeService_1.createBridgeService(host, auth);
    const fetchCaller = () => __awaiter(void 0, void 0, void 0, function* () {
        const spec = utils_1.getSpec(specFile);
        const { data } = yield sdk.extension.caller({
            extensionUUID: extensionName || spec.name,
        });
        if (data !== undefined) {
            const { caller } = data;
            return caller;
        }
    });
    const RPCLogs = (hostname, caller, millisecondsAgo) => {
        return new Promise(resolve => {
            const client = bridge_sdk_1.createGRPCClient(hostname).streamLogs({
                caller,
                fromTimestamp: Date.now() - millisecondsAgo,
            });
            client.on('data', (response) => {
                if (response.record) {
                    if (response.record.logType === 'ERROR') {
                        console.error(extension_cli_logger_1.Chalk.red(new Date(parseInt(response.record.timestamp, 10)).toString(), response.record.logType), ...JSON.parse(response.record.message));
                    }
                    else {
                        console.log(new Date(parseInt(response.record.timestamp, 10)).toString(), response.record.logType, ...JSON.parse(response.record.message));
                    }
                }
            });
            client.on('end', () => {
                resolve();
            });
        });
    };
    const streamLogs = (hostname, millisecondsAgo) => __awaiter(void 0, void 0, void 0, function* () {
        const caller = yield fetchCaller();
        yield RPCLogs(hostname, caller, millisecondsAgo);
        extension_cli_logger_1.Logger.info(extension_cli_logger_1.Chalk.yellow('No logs have been sent in over a minute.'));
        const date = Date.now();
        const answer = yield inquirer_1.prompt({
            type: 'confirm',
            name: 'reconnect',
            message: 'Would you like to continue?',
            default: true,
        });
        if (answer.reconnect) {
            extension_cli_logger_1.Logger.verbose('Restarting stream');
            return streamLogs(hostname, Date.now() - date);
        }
        extension_cli_logger_1.Logger.verbose('Closing stream');
    });
    return () => __awaiter(void 0, void 0, void 0, function* () {
        extension_cli_logger_1.Logger.start('Authenticating platform');
        const { data: { pluginDataService: { domain, port }, }, } = yield sdk.platform.get();
        extension_cli_logger_1.Logger.verbose('Platform', extension_cli_logger_1.Chalk.cyan(`${domain}:${port}`));
        extension_cli_logger_1.Logger.end();
        extension_cli_logger_1.Logger.info(extension_cli_logger_1.Chalk.cyan('Streaming logs...'));
        yield streamLogs(`${domain}:${port}`, milliseconds);
    });
};
//# sourceMappingURL=logsService.js.map
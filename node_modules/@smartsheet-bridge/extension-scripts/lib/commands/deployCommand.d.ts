import { CommandModule } from 'yargs';
import { CreateBuildServiceFn } from '../services/buildService';
import { CreateDeployServiceFn } from '../services/deployService';
import type { InferArgumentsIn } from '../types';
declare const deployArguments: {
    url: {
        type: "string";
        describe: string;
        coerce: (urlInput: string) => string;
    };
    key: {
        type: "string";
        describe: string;
    };
    specFile: {
        global: boolean;
        default: string;
        description: string;
    };
    env: {
        type: "array";
        string: true;
        description: string;
        coerce: (env?: import("../utils").ENVPossibleInput) => import("../utils").ENVMap;
    };
    include: {
        type: "string";
        default: string;
        description: string;
    };
    exclude: {
        type: "string";
        description: string;
        default: string;
        coerce: (excl: string | string[]) => string[];
    };
    symlinks: {
        type: "boolean";
        description: string;
        default: boolean;
        coerce: (ln?: boolean) => boolean;
    };
    build: {
        type: "boolean";
        description: string;
        default: boolean;
    };
};
export declare type DeployConfig = InferArgumentsIn<typeof deployArguments>;
export declare const createDeployCommand: (createDeployService: CreateDeployServiceFn, createBuildService?: CreateBuildServiceFn) => CommandModule;
export {};
//# sourceMappingURL=deployCommand.d.ts.map
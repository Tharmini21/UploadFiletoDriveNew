"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogsCommand = void 0;
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const middlewareAuth_1 = require("../middleware/middlewareAuth");
const options_1 = require("../options");
const MILLISECONDS_PER_SECOND = 1000;
const SECONDS_PER_MINUTE = 60;
const SECOND = MILLISECONDS_PER_SECOND;
const MINUTE = SECOND * SECONDS_PER_MINUTE;
class MinutesUserError extends extension_cli_logger_1.UserError {
    constructor() {
        super(`Parameter 'minutes' must be a number!`, `You can use the ${extension_cli_logger_1.Chalk.cyan('--minutes')} flag to travel back in time and view logs from up to 60 minutes ago.`, {
            items: [
                `extension-scripts logs --minutes=${extension_cli_logger_1.Chalk.cyan('[insert minutes here]')}`,
                `extension-scripts logs -m ${extension_cli_logger_1.Chalk.cyan('[insert minutes here]')}`,
            ],
        });
    }
}
const logsOptions = {
    url: options_1.url,
    key: options_1.key,
    specFile: options_1.specFile,
    extension: options_1.extension,
    minutes: {
        default: 0,
        type: 'number',
        alias: 'm',
        description: 'The number of minutes in the past to start streaming the logs from.',
        coerce: (num) => {
            if (typeof num !== 'number' || Number.isNaN(num)) {
                throw new MinutesUserError();
            }
            return Math.abs(num);
        },
    },
};
const builder = yargs => {
    return yargs
        .middleware(middlewareAuth_1.middlewareAuth)
        .positional('alias', options_1.alias)
        .options(logsOptions);
};
const createLogsHandler = (createLogsService) => (argv) => __awaiter(void 0, void 0, void 0, function* () {
    const logs = createLogsService({
        host: argv.url,
        auth: argv.key,
        options: {
            milliseconds: Math.abs(argv.minutes) * MINUTE,
            specFile: argv.specFile,
            name: argv.extension,
        },
    });
    yield logs();
});
exports.createLogsCommand = (createLogsService) => ({
    command: 'logs [alias]',
    aliases: ['l', 'log', 'stream-log', 'stream-logs'],
    describe: 'Stream logs from production.',
    builder,
    handler: createLogsHandler(createLogsService),
});
//# sourceMappingURL=logsCommand.js.map
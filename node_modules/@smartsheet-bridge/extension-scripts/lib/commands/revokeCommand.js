"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRevokeCommand = void 0;
const middlewareAuth_1 = require("../middleware/middlewareAuth");
const options_1 = require("../options");
const revokeOptions = {
    url: options_1.url,
    key: options_1.key,
    specFile: options_1.specFile,
    extension: options_1.extension,
    force: {
        type: 'boolean',
        default: false,
        alias: '-f',
    },
};
const builder = yargs => {
    return yargs
        .middleware(middlewareAuth_1.middlewareAuth)
        .positional('alias', options_1.alias)
        .options(revokeOptions);
};
const createRevokeHandler = (createRevokeService) => (argv) => __awaiter(void 0, void 0, void 0, function* () {
    const revoke = createRevokeService({
        host: argv.url,
        auth: argv.key,
        options: {
            force: argv.force,
            specFile: argv.specFile,
            name: argv.extension,
        },
    });
    yield revoke();
});
exports.createRevokeCommand = (createRevokeService) => ({
    command: 'revoke [alias]',
    aliases: ['r', 'delete', 'remove', 'unpublish'],
    describe: 'Revoke extension from production.',
    builder,
    handler: createRevokeHandler(createRevokeService),
});
//# sourceMappingURL=revokeCommand.js.map
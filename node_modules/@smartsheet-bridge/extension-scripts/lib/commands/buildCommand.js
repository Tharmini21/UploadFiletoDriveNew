"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBuildCommand = exports.argvToBuildArgs = exports.buildArguments = void 0;
const options_1 = require("../options");
exports.buildArguments = {
    src: {
        type: 'string',
        default: 'src',
        description: 'Root directory of all source files.',
    },
    out: {
        type: 'string',
        default: 'lib',
        description: 'Root directory of all outputed files.',
    },
    clean: {
        type: 'boolean',
        default: true,
        description: 'Clean `out` folder before building. Run with `--no-clean` to prevent `out` folder from being deleted before build.',
    },
    include: options_1.include,
    exclude: options_1.exclude,
};
exports.argvToBuildArgs = (argv) => ({
    src: argv.src,
    out: argv.out,
    options: {
        exclude: argv.exclude,
        include: argv.include,
        clean: argv.clean,
    },
});
const builder = yargs => {
    return yargs.options(exports.buildArguments);
};
const createBuildHandler = (createBuildService) => (argv) => __awaiter(void 0, void 0, void 0, function* () {
    const build = createBuildService(exports.argvToBuildArgs(argv));
    build();
});
exports.createBuildCommand = (createBuildService) => ({
    command: 'build',
    aliases: ['b', 'compile'],
    describe: 'Build extension for production.',
    builder,
    handler: createBuildHandler(createBuildService),
});
//# sourceMappingURL=buildCommand.js.map
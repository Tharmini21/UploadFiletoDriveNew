"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createListAccountCommand = void 0;
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const utils_1 = require("../../utils");
const createListCommandHandler = (createAccountService) => () => __awaiter(void 0, void 0, void 0, function* () {
    const { listAccounts } = createAccountService();
    const accounts = listAccounts();
    if (accounts.length > 0) {
        accounts.forEach(account => {
            extension_cli_logger_1.Logger.info(account.alias, extension_cli_logger_1.Chalk.cyan.underline(account.url), utils_1.maskKey(account.key));
        });
    }
    else {
        extension_cli_logger_1.Logger.info('No account aliases stored on this machine.');
    }
});
exports.createListAccountCommand = (createAccountService) => ({
    command: 'list',
    aliases: ['ls'],
    describe: 'List all account aliases.',
    handler: createListCommandHandler(createAccountService),
});
//# sourceMappingURL=listAccountCommand.js.map
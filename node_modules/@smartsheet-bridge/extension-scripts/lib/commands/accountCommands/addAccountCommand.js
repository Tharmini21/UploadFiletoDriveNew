"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAddAccountCommand = void 0;
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const AliasAlreadyExistsError_1 = require("../../errors/AliasAlreadyExistsError");
const KeyNotFoundError_1 = require("../../errors/KeyNotFoundError");
const URLNotFoundError_1 = require("../../errors/URLNotFoundError");
const options_1 = require("../../options");
const addAccountArguments = {
    url: options_1.url,
    key: options_1.key,
    overwrite: {
        type: 'boolean',
        description: 'Overwrite any existing alias.',
        default: false,
        coerce: (o) => (o !== undefined ? o : false),
    },
};
const createAddAccountBuilder = (createAccountService) => yargs => {
    return yargs
        .positional('alias', options_1.alias)
        .options(addAccountArguments)
        .check(argv => {
        if (typeof argv.url !== 'string') {
            throw new URLNotFoundError_1.URLNotFoundError(`account ${argv.alias}`);
        }
        if (typeof argv.key !== 'string') {
            throw new KeyNotFoundError_1.KeyNotFoundError(`account ${argv.alias}`);
        }
        const { getAccount } = createAccountService();
        const account = getAccount(argv.alias);
        if (account !== undefined && argv.overwrite !== true) {
            throw new AliasAlreadyExistsError_1.AliasAlreadyExistsError(argv.alias);
        }
        return true;
    });
};
const createAddAccountHandler = (createAccountService) => (argv) => __awaiter(void 0, void 0, void 0, function* () {
    const { saveAccount } = createAccountService();
    saveAccount(argv.alias, {
        key: argv.key,
        url: argv.url,
    });
    extension_cli_logger_1.Logger.info('Added account alias', `'${argv.alias}'`, extension_cli_logger_1.Chalk.cyan.underline(argv.url));
});
exports.createAddAccountCommand = (createAccountService) => ({
    command: 'add [alias]',
    aliases: ['a'],
    describe: 'Add or overwrite account alias.',
    builder: createAddAccountBuilder(createAccountService),
    handler: createAddAccountHandler(createAccountService),
});
//# sourceMappingURL=addAccountCommand.js.map
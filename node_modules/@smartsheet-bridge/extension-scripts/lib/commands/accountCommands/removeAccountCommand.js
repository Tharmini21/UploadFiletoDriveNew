"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRemoveAccountCommand = void 0;
const extension_cli_logger_1 = require("@smartsheet-bridge/extension-cli-logger");
const AliasNotFoundError_1 = require("../../errors/AliasNotFoundError");
const options_1 = require("../../options");
const builder = yargs => {
    return yargs.positional('alias', options_1.alias).check(argv => {
        if (typeof argv.alias !== 'string') {
            throw new AliasNotFoundError_1.AliasNotFoundError(argv.alias);
        }
        return true;
    });
};
const createRemoveAccountHandler = (createAccountService) => (argv) => __awaiter(void 0, void 0, void 0, function* () {
    const { getAccount, removeAccount } = createAccountService();
    const account = getAccount(argv.alias);
    if (account !== undefined) {
        removeAccount(argv.alias);
        extension_cli_logger_1.Logger.info('Removed account alias', `'${argv.alias}'`);
    }
    else {
        extension_cli_logger_1.Logger.info('No account alias', `'${argv.alias}'`);
    }
});
exports.createRemoveAccountCommand = (createAccountService) => ({
    command: 'remove <alias>',
    aliases: ['rm'],
    describe: 'Remove an account alias.',
    builder,
    handler: createRemoveAccountHandler(createAccountService),
});
//# sourceMappingURL=removeAccountCommand.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDeployCommand = void 0;
const middlewareAuth_1 = require("../middleware/middlewareAuth");
const options_1 = require("../options");
const utils_1 = require("../utils");
const buildCommand_1 = require("./buildCommand");
const deployArguments = {
    url: options_1.url,
    key: options_1.key,
    specFile: options_1.specFile,
    env: {
        type: 'array',
        string: true,
        description: 'Set environment variables on deployed extension.',
        coerce: utils_1.buildEnvironmentVariables,
    },
    include: options_1.include,
    exclude: options_1.exclude,
    symlinks: {
        type: 'boolean',
        description: 'Follow symlinks when packaging extension for deployment.',
        default: false,
        coerce: (ln) => (ln !== undefined ? ln : false),
    },
    build: {
        type: 'boolean',
        description: 'Build code on deployment. Use `--no-build` to disable this feature.',
        default: true,
    },
};
const builder = yargs => {
    return yargs
        .middleware(middlewareAuth_1.middlewareAuth)
        .positional('alias', options_1.alias)
        .options(Object.assign(Object.assign({}, buildCommand_1.buildArguments), deployArguments));
};
const createDeployHandler = (createDeployService, createBuildService) => (argv) => __awaiter(void 0, void 0, void 0, function* () {
    if (argv.build && createBuildService) {
        const build = createBuildService(buildCommand_1.argvToBuildArgs(argv));
        build();
    }
    const deploy = createDeployService({
        host: argv.url,
        auth: argv.key,
        options: {
            exclude: argv.exclude,
            include: argv.include,
            symlinks: argv.symlinks,
            specFile: argv.specFile,
            env: argv.env,
        },
    });
    yield deploy();
});
exports.createDeployCommand = (createDeployService, createBuildService) => ({
    command: 'deploy [alias]',
    aliases: ['d', 'publish'],
    describe: 'Deploy to production.',
    builder,
    handler: createDeployHandler(createDeployService, createBuildService),
});
//# sourceMappingURL=deployCommand.js.map